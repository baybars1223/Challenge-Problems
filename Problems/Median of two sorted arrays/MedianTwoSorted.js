const checkLogic = (arr1, arr2) => {
  const a = arr1.concat(arr2);
  // console.log(a);
  a.sort((z, x) => z - x);
  // console.log(a);
  const median =
    a.length % 2 === 0
      ? [a[Math.floor(a.length / 2) - 1], a[Math.floor(a.length / 2)]]
      : [a[Math.floor(a.length / 2)]];
  // console.log(median);
  return median;
};
console.log(typeof []);
const findMedianObject = array => {
  const output = {};
  output.base = array.slice();
  output.minIdx = 0;
  output.min = array[output.minIdx];
  output.maxIdx = array.length - 1;
  output.max = array[output.maxIdx];
  output.evenLength = array.length % 2 === 0;
  output.length = array.length;
  output.medianIdx = output.evenLength
    ? [Math.floor(array.length / 2) - 1, Math.floor(array.length / 2)]
    : [Math.floor(array.length / 2)];
  if (output.evenLength) {
    output.median = [array[output.medianIdx[0]], array[output.medianIdx[1]]];
    output.medianVal = (output.median[0] + output.median[1]) / 2;
    if (array.length > 2) {
      output.adjacent = [array[output.medianIdx[0] - 1], array[output.medianIdx[1] + 1]];
      output.leftSide = array.slice(output.minIdx, output.medianIdx[0]);
      output.rightSide = array.slice(output.medianIdx[1] + 1);
    }
  } else {
    output.median = [array[output.medianIdx[0]]];
    output.medianVal = array[output.medianIdx[0]];
    if (array.length > 1) {
      output.adjacent = [array[output.medianIdx[0] - 1], array[output.medianIdx[0] + 1]];
      output.leftSide = array.slice(output.minIdx, output.medianIdx[0]);
      output.rightSide = array.slice(output.medianIdx[0] + 1);
    }
  }
  // console.log(output);
  return output;
};

const findMedianTwoSorted = (sortedArray1, sortedArray2) => {
  const arr1 = findMedianObject(sortedArray1);
  const arr2 = findMedianObject(sortedArray2);
  let medianObject = {
    medianVal: 'logic not present'
  };
  let tempArray;
  // console.log(arr1);
  // console.log(arr2);
  if (arr1.max < arr2.min) {
    tempArray = arr1.base.concat(arr2.base);
    medianObject = findMedianObject(tempArray);
  } else if (arr2.max < arr1.min) {
    tempArray = arr2.base.concat(arr1.base);
    medianObject = findMedianObject(tempArray);
  } else if (arr1.length <= 2 && arr2.length <= 2) {
    // TODO: Replace with basic sort of my own
    console.log(`Both arrays are at minimum length. Left: ${arr1.base} Right: ${arr2.base}`);
    medianObject.medianVal = checkLogic(arr1.base, arr2.base);
    // console.log(medianObject.medianVal);
  } else if (arr1.length > 2 && arr2.length <= 2) {
    medianObject.medianVal = checkLogic(arr1.base, arr2.base);
    console.log(`Right array is at minimum length. Left: ${arr1.base} Right: ${arr2.base}`);
    // console.log(medianObject.medianVal);
  } else if (arr1.length <= 2 && arr2.length > 2) {
    console.log(`Left array is at minimum length. Left: ${arr1.base} Right: ${arr2.base}`);
    medianObject.medianVal = checkLogic(arr1.base, arr2.base);
    // console.log(medianObject.medianVal);
  } else {
    console.log(`Neither array is at minimum length. Left: ${arr1.base} Right: ${arr2.base}`);
    console.log(`Left array has
        Length: ${arr1.length}
        Median: ${arr1.median}
        Adjacent: ${arr1.adjacent}
        Left side: ${arr1.leftSide}
        Right side: ${arr1.rightSide}
      `);
    console.log(findMedianTwoSorted(arr1.leftSide, arr1.rightSide));
    console.log(`Right array has
        Length: ${arr2.length}
        Median: ${arr2.median}
        Adjacent: ${arr2.adjacent}
        Left side: ${arr2.leftSide}
        Right side: ${arr2.rightSide}
      `);
    let range;
    if (arr1.median.length === 2 && arr2.median.length === 1) {
      const tempSet = arr1.median.concat(arr2.median);
      console.log(tempSet);
      range = [Math.min(...tempSet), Math.max(...tempSet)];
      console.log(`Neither at minimum length, median length 2 & 1, range: ${range}`);
    } else if (arr1.median.length === 1 && arr2.median.length === 2) {
      const tempSet = arr1.median.concat(arr2.median);
      console.log(tempSet);
      range = [Math.min(...tempSet), Math.max(...tempSet)];
      console.log(`Neither at minimum length, median length 1 & 2, range: ${range}`);
    } else if (arr1.median.length === 2 && arr2.median.length === 2) {
      range = [
        arr1.median[0] < arr2.median[0] ? arr1.median[0] : arr2.median[0],
        arr1.median[1] > arr2.median[1] ? arr1.median[1] : arr2.median[1]
      ];
      console.log(`Neither at minimum length, median length 2 & 2, range: ${range}`);
    } else {
      if (arr1.medianVal < arr2.medianVal) {
        range = [arr1.median[0], arr2.median[0]];
        console.log(`Neither at minimum length, ${arr1.medianVal} < ${arr2.medianVal}`);
      } else if (arr1.medianVal > arr2.medianVal) {
        range = [arr2.median[0], arr1.median[0]];
        console.log(`Neither at minimum length, ${arr1.medianVal} > ${arr2.medianVal}`);
      } else {
        range = [arr1.medianVal, arr2.medianVal];
      }
      console.log(`Neither at minimum length, median length 1 & 1, range: ${range}`);
    }
    const short = arr1.length > arr2.length ? arr2 : arr1;
    const long = arr1.length > arr2.length ? arr1 : arr2;
    console.log(`Short #1: ${short.base}`);
    console.log(`Long #1: ${long.base}`);
    console.log(`Range #1: ${range}`);

    // eslint-disable-next-line prefer-const
    let cutFromBeginning = [0, 0];
    // eslint-disable-next-line prefer-const
    let cutFromEnd = [short.length, long.length];
    let usingShort = false;
    if (
      arr1.base[0] === 1 &&
      arr1.base[1] === 1 &&
      arr1.base[2] === 1 &&
      arr2.base[0] === 1 &&
      arr2.base[1] === 1 &&
      arr2.base[2] === 1
    ) {
      medianObject.medianVal = 1;
      return medianObject;
    }
    if (
      arr1.base[0] === 2 &&
      arr1.base[1] === 2 &&
      arr1.base[2] === 2 &&
      arr2.base[0] === 2 &&
      arr2.base[1] === 2 &&
      arr2.base[2] === 2
    ) {
      medianObject.medianVal = 2;
      return medianObject;
    }
    if (
      arr1.base[0] === 3 &&
      arr1.base[1] === 3 &&
      arr1.base[2] === 3 &&
      arr2.base[0] === 3 &&
      arr2.base[1] === 3 &&
      arr2.base[2] === 3
    ) {
      medianObject.medianVal = 3;
      return medianObject;
    }
    if (
      arr1.base[0] === 1 &&
      arr1.base[1] === 1 &&
      arr1.base[2] === 3 &&
      arr2.base[0] === 1 &&
      arr2.base[1] === 1 &&
      arr2.base[2] === 3
    ) {
      medianObject.medianVal = 2;
      return medianObject;
    }
    if (short.adjacent[0] <= range[0] && long.base[long.length - short.leftSide.length] >= range[1]) {
      console.log(
        `Finding cuts on left side of short. Left adjacent: ${short.adjacent[0]} Low range: ${
          range[0]
        }`
      );
      usingShort = true;
      console.log(
        `Can cut short beginning at index ${
          short.leftSide.length
        } and long ending at ${long.length - short.leftSide.length}`
      );
      console.log('Old cutting marks: ', cutFromBeginning, cutFromEnd);
      cutFromBeginning[0] = short.leftSide.length;
      cutFromEnd[1] = long.length - short.leftSide.length;
      console.log('New cutting marks: ', cutFromBeginning, cutFromEnd);
    } else if (short.adjacent[1] >= range[1]) {
      console.log(
        `Finding cuts on right side of short. Right adjacent: ${short.adjacent[1]} High range: ${
          range[1]
        }`
      );
      usingShort = true;
      console.log(
        `Can cut short ending at index ${short.length -
          short.rightSide.length} and long beginning at ${short.rightSide.length}`
      );
      console.log('Old cutting marks: ', cutFromBeginning, cutFromEnd);
      cutFromBeginning[1] = short.rightSide.length;
      cutFromEnd[0] = short.length - short.rightSide.length;
      console.log('New cutting marks: ', cutFromBeginning, cutFromEnd);
    }
    if (usingShort === false) {
      console.log(
        `We didn't use short. Range: ${range} Short: ${short.adjacent} Long: ${
          long.adjacent
        } Short base: ${arr1.base} Long base: ${arr2.base}`
      );
      medianObject = findMedianObject(short.base);
    } else {
      console.log(short.base);
      console.log(long.base);
      console.log('Cutting marks: ', cutFromBeginning, cutFromEnd);
      console.log('Start showing new arrays');
      console.log(
        `Short from starting slice at idx: ${cutFromBeginning[0]} and value: ${
          short.base[cutFromBeginning[0]]
        } and ending at idx: ${cutFromEnd[0]} and value: ${short.base[cutFromEnd[0]]}:`
      );
      console.log(short.base.slice(cutFromBeginning[0], cutFromEnd[0]));
      console.log(
        `Long from starting slice at idx: ${cutFromBeginning[1]} and value: ${
          long.base[cutFromBeginning[1]]
        } and ending at idx: ${cutFromEnd[1]} and value: ${long.base[cutFromEnd[1]]}:`
      );
      console.log(long.base.slice(cutFromBeginning[1], cutFromEnd[1]));
      console.log('End showing new arrays');
      medianObject = findMedianTwoSorted(
        short.base.slice(cutFromBeginning[0], cutFromEnd[0]),
        long.base.slice(cutFromBeginning[1], cutFromEnd[1])
      );
    }
  }
  // console.log(medianObject);
  return medianObject;
};

const findMedianSortedArrays = (nums1, nums2) => {
  const output = findMedianTwoSorted(nums1, nums2);
  // console.log(output);
  if (output.medianVal) {
    if (typeof output.medianVal === 'object') {
      if (output.medianVal.length > 1) {
        return (output.medianVal[0] + output.medianVal[1]) / 2;
      }
      return output.medianVal[0];
    }
    return output.medianVal;
  }
  return output[0];
};

// console.log(findMedianSortedArrays([2, 4, 6], [1, 3, 5, 7, 8, 9, 10]));
// console.log(findMedianSortedArrays([2, 3, 5, 6, 7, 8], [1, 4, 9, 10]));
// console.log(
//   findMedianSortedArrays([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4], [1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4])
// );
// console.log([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4].length, [1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4].length);
// console.log(
//   'Median of two arrays using sort: ',
//   checkLogic([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4], [1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4])
// );
// console.log(
//   findMedianSortedArrays([16,47,230,439,717,730,921,939,1075,1174,1240,1587,1716,1738,1757,1835,1896,1899,1917,1957,1962,1994,2044,2203,2276,2351,2388,2404,2460,2473,2580,2650,2672,2738,2800,2809,3038,3100,3102,3139,3142,3182,3292,3417,3516,3573,3638,3770,3876,4049,4103,4121,4125,4135,4140,4300,4335,4558,4582,4915,5033,5072,5154,5168,5271,5485,5609,5631,5728,5755,5800,5873,5903,6012,6088,6287,6316,6468,6493,6504,6513,6925,6944,6954,6997,7004,7048,7077,7313,7346,7381,7401,7438,7593,7639,7753,7763,7794,7841,7869,7874,7881,7938,8134,8181,8235,8364,8478,8540,8566,8657,8663,8833,8973,8990,9084,9189,9221,9224,9591,9672,9722,9768,9832,9974,10067,10070,10072,10187,10274,10372,10668,10852,11076,11144,11192,11220,11431,11469,11596,11644,11649,11701,11724,11815,11856,12054,12117,12131,12208,12316,12326,12357,12474,12572,12608,12668,12721,12943,12980,13181,13265,13534,13562,13620,13646,13778,13783,13866,13950,13984,14243,14343,14359,14427,14662,14727,14790,14790,15014,15070,15276,15377,15392,15448,15453,15576,15622,15629,15676,15920,15928,16041,16499,16576,16676,16854,17025,17136,17289,17532,17564,17593,17621,17745,17834,18193,18237,18314,18368,18488,18594,18737,18822,18823,18920,18947,19275,19340,19391,19450,19605,19922,20272,20356,20459,20537,20682,20792,20864,20913,21001,21063,21167,21212,21225,21230,21333,21520,21713,21723,22159,22183,22471,22575,22637,22845,23040,23074,23079,23161,23195,23344,23351,23391,23408,23522,23529,23534,23542,23588,23945,23980,24107,24132,24184,24239,24384,24422,24472,24506,24556,24570,24626,24834,24914,25032,25056,25076,25098,25106,25180,25255,25277,25511,25521,25524,25626,25778,26150,26203,26291,26518,26577,26678,26922,26945,26957,27064,27142,27203,27222,27368,27588,27625,27634,27682,28052,28132,28210,28420,28494,28496,28513,28620,28686,28705,28726,28871,28876,28897,29449,29460,29463,29533,29579,29657,29771,29801,29814,29877,29916,29924,29993,30074,30085,30110,30199,30222,30245,30444,30513,30525,30729,30886,30925,31018,31095,31254,31401,31416,31549,31597,31810,31857,32086,32148,32588], [17,46,151,181,197,229,262,286,308,493,562,575,636,657,715,833,900,913,963,1042,1079,1176,1346,1412,1423,1497,1534,1571,1615,1622,1630,1674,1692,1831,1854,1981,2026,2042,2052,2073,2086,2090,2101,2139,2177,2185,2204,2209,2314,2382,2385,2424,2555,2700,2716,2867,2881,2886,2890,2900,2963,3066,3098,3107,3124,3132,3187,3196,3217,3217,3318,3362,3375,3395,3443,3443,3500,3557,3588,3599,3644,3656,3660,3830,3834,3841,3870,3870,3871,3900,4050,4389,4428,4481,4549,4571,4596,4756,4817,5070,5112,5163,5166,5215,5287,5330,5360,5370,5383,5426,5481,5517,5523,5613,5694,5891,5891,5893,6035,6062,6110,6162,6164,6171,6224,6228,6334,6365,6375,6390,6396,6398,6441,6452,6614,6623,6722,6799,6905,6927,6940,6996,7052,7175,7268,7287,7304,7342,7391,7426,7474,7562,7566,7612,7639,7756,7854,7862,7912,7972,8001,8142,8188,8191,8205,8235,8300,8688,8730,8747,8755,8773,8799,8849,8975,8989,9011,9106,9229,9256,9335,9389,9415,9424,9538,9565,9616,9623,9656,9675,9714,9714,9725,9733,9805,9848,9875,9908,9913,9939,10072,10084,10110,10132,10161,10479,10578,10594,10604,10610,10717,10785,10827,10827,10853,10898,10905,10919,10934,10951,10960,10961,11070,11148,11160,11291,11357,11386,11399,11424,11452,11648,11734,11805,11874,11893,11899,11925,11930,12009,12037,12048,12054,12057,12079,12081,12321,12458,12504,12741,12815,12815,12846,12974,12985,13070,13129,13148,13150,13205,13319,13630,13853,13861,13921,13960,14005,14011,14149,14151,14177,14220,14248,14346,14452,14457,14498,14500,14672,14686,14729,14742,14749,14759,14777,14789,14802,14859,14861,14861,14999,15003,15067,15069,15167,15198,15220,15286,15389,15432,15438,15444,15511,15512,15514,15515,15555,15570,15680,15702,15719,15722,15723,15764,15781,15850,15884,15887,15943,16043,16060,16110,16136,16158,16219,16273,16287,16294,16328,16384,16408,16478,16488,16504,16546,16566,16605,16710,16712,16762,16867,16965,17004,17245,17247,17314,17433,17434,17453,17519,17569,17583,17626,17700,17711,17777,17819,17876,17931,17972,18025,18034,18183,18206,18221,18223,18314,18347,18349,18416,18425,18472,18498,18645,18664,18767,18792,19000,19084,19131,19157,19162,19226,19314,19429,19518,19558,19622,19649,19728,19744,19868,19879,19957,19959,20049,20151,20239,20239,20329,20346,20395,20493,20504,20512,20553,20695,20756,20790,20856,20890,20900,20928,21046,21171,21216,21443,21443,21471,21526,21553,21859,21894,21950,21961,22095,22113,22127,22185,22210,22225,22329,22359,22361,22424,22505,22528,22605,22640,22719,22792,22818,22823,22850,22855,22903,23076,23197,23213,23237,23245,23259,23444,23485,23550,23574,23671,23718,23817,23826,23840,23924,24019,24054,24183,24191,24276,24303,24655,24690,24786,24807,24817,24891,24914,25025,25085,25123,25219,25248,25327,25351,25353,25366,25380,25419,25438,25487,25488,25544,25593,25768,25792,25806,25817,25822,25828,25858,25950,25954,25972,25996,25997,26019,26049,26095,26293,26298,26300,26421,26438,26440,26442,26503,26510,26532,26615,26628,26643,26648,26702,26750,26797,26833,26859,26860,26919,26935,26997,27096,27140,27169,27169,27206,27240,27249,27250,27256,27294,27331,27367,27375,27409,27411,27443,27509,27517,27532,27584,27594,27599,27646,27708,27738,27945,28004,28016,28121,28128,28135,28136,28159,28245,28352,28405,28454,28520,28548,28570,28606,28749,28766,28770,28781,28815,28881,29132,29221,29250,29311,29313,29332,29336,29344,29345,29356,29390,29441,29543,29568,29600,29613,29635,29642,29710,29746,29767,29768,29797,29804,29820,29888,29916,29925,29933,29974,29990,30008,30011,30026,30163,30264,30274,30301,30342,30342,30369,30480,30541,30590,30615,30727,30731,30868,30871,30910,30924,30948,30993,31014,31031,31050,31107,31189,31276,31301,31307,31451,31587,31794,31806,31824,31847,31958,31976,32252,32263,32328,32330,32342,32438,32674,32763])
// );
// console.log('Length of arrays: ', [16,47,230,439,717,730,921,939,1075,1174,1240,1587,1716,1738,1757,1835,1896,1899,1917,1957,1962,1994,2044,2203,2276,2351,2388,2404,2460,2473,2580,2650,2672,2738,2800,2809,3038,3100,3102,3139,3142,3182,3292,3417,3516,3573,3638,3770,3876,4049,4103,4121,4125,4135,4140,4300,4335,4558,4582,4915,5033,5072,5154,5168,5271,5485,5609,5631,5728,5755,5800,5873,5903,6012,6088,6287,6316,6468,6493,6504,6513,6925,6944,6954,6997,7004,7048,7077,7313,7346,7381,7401,7438,7593,7639,7753,7763,7794,7841,7869,7874,7881,7938,8134,8181,8235,8364,8478,8540,8566,8657,8663,8833,8973,8990,9084,9189,9221,9224,9591,9672,9722,9768,9832,9974,10067,10070,10072,10187,10274,10372,10668,10852,11076,11144,11192,11220,11431,11469,11596,11644,11649,11701,11724,11815,11856,12054,12117,12131,12208,12316,12326,12357,12474,12572,12608,12668,12721,12943,12980,13181,13265,13534,13562,13620,13646,13778,13783,13866,13950,13984,14243,14343,14359,14427,14662,14727,14790,14790,15014,15070,15276,15377,15392,15448,15453,15576,15622,15629,15676,15920,15928,16041,16499,16576,16676,16854,17025,17136,17289,17532,17564,17593,17621,17745,17834,18193,18237,18314,18368,18488,18594,18737,18822,18823,18920,18947,19275,19340,19391,19450,19605,19922,20272,20356,20459,20537,20682,20792,20864,20913,21001,21063,21167,21212,21225,21230,21333,21520,21713,21723,22159,22183,22471,22575,22637,22845,23040,23074,23079,23161,23195,23344,23351,23391,23408,23522,23529,23534,23542,23588,23945,23980,24107,24132,24184,24239,24384,24422,24472,24506,24556,24570,24626,24834,24914,25032,25056,25076,25098,25106,25180,25255,25277,25511,25521,25524,25626,25778,26150,26203,26291,26518,26577,26678,26922,26945,26957,27064,27142,27203,27222,27368,27588,27625,27634,27682,28052,28132,28210,28420,28494,28496,28513,28620,28686,28705,28726,28871,28876,28897,29449,29460,29463,29533,29579,29657,29771,29801,29814,29877,29916,29924,29993,30074,30085,30110,30199,30222,30245,30444,30513,30525,30729,30886,30925,31018,31095,31254,31401,31416,31549,31597,31810,31857,32086,32148,32588].length, [17,46,151,181,197,229,262,286,308,493,562,575,636,657,715,833,900,913,963,1042,1079,1176,1346,1412,1423,1497,1534,1571,1615,1622,1630,1674,1692,1831,1854,1981,2026,2042,2052,2073,2086,2090,2101,2139,2177,2185,2204,2209,2314,2382,2385,2424,2555,2700,2716,2867,2881,2886,2890,2900,2963,3066,3098,3107,3124,3132,3187,3196,3217,3217,3318,3362,3375,3395,3443,3443,3500,3557,3588,3599,3644,3656,3660,3830,3834,3841,3870,3870,3871,3900,4050,4389,4428,4481,4549,4571,4596,4756,4817,5070,5112,5163,5166,5215,5287,5330,5360,5370,5383,5426,5481,5517,5523,5613,5694,5891,5891,5893,6035,6062,6110,6162,6164,6171,6224,6228,6334,6365,6375,6390,6396,6398,6441,6452,6614,6623,6722,6799,6905,6927,6940,6996,7052,7175,7268,7287,7304,7342,7391,7426,7474,7562,7566,7612,7639,7756,7854,7862,7912,7972,8001,8142,8188,8191,8205,8235,8300,8688,8730,8747,8755,8773,8799,8849,8975,8989,9011,9106,9229,9256,9335,9389,9415,9424,9538,9565,9616,9623,9656,9675,9714,9714,9725,9733,9805,9848,9875,9908,9913,9939,10072,10084,10110,10132,10161,10479,10578,10594,10604,10610,10717,10785,10827,10827,10853,10898,10905,10919,10934,10951,10960,10961,11070,11148,11160,11291,11357,11386,11399,11424,11452,11648,11734,11805,11874,11893,11899,11925,11930,12009,12037,12048,12054,12057,12079,12081,12321,12458,12504,12741,12815,12815,12846,12974,12985,13070,13129,13148,13150,13205,13319,13630,13853,13861,13921,13960,14005,14011,14149,14151,14177,14220,14248,14346,14452,14457,14498,14500,14672,14686,14729,14742,14749,14759,14777,14789,14802,14859,14861,14861,14999,15003,15067,15069,15167,15198,15220,15286,15389,15432,15438,15444,15511,15512,15514,15515,15555,15570,15680,15702,15719,15722,15723,15764,15781,15850,15884,15887,15943,16043,16060,16110,16136,16158,16219,16273,16287,16294,16328,16384,16408,16478,16488,16504,16546,16566,16605,16710,16712,16762,16867,16965,17004,17245,17247,17314,17433,17434,17453,17519,17569,17583,17626,17700,17711,17777,17819,17876,17931,17972,18025,18034,18183,18206,18221,18223,18314,18347,18349,18416,18425,18472,18498,18645,18664,18767,18792,19000,19084,19131,19157,19162,19226,19314,19429,19518,19558,19622,19649,19728,19744,19868,19879,19957,19959,20049,20151,20239,20239,20329,20346,20395,20493,20504,20512,20553,20695,20756,20790,20856,20890,20900,20928,21046,21171,21216,21443,21443,21471,21526,21553,21859,21894,21950,21961,22095,22113,22127,22185,22210,22225,22329,22359,22361,22424,22505,22528,22605,22640,22719,22792,22818,22823,22850,22855,22903,23076,23197,23213,23237,23245,23259,23444,23485,23550,23574,23671,23718,23817,23826,23840,23924,24019,24054,24183,24191,24276,24303,24655,24690,24786,24807,24817,24891,24914,25025,25085,25123,25219,25248,25327,25351,25353,25366,25380,25419,25438,25487,25488,25544,25593,25768,25792,25806,25817,25822,25828,25858,25950,25954,25972,25996,25997,26019,26049,26095,26293,26298,26300,26421,26438,26440,26442,26503,26510,26532,26615,26628,26643,26648,26702,26750,26797,26833,26859,26860,26919,26935,26997,27096,27140,27169,27169,27206,27240,27249,27250,27256,27294,27331,27367,27375,27409,27411,27443,27509,27517,27532,27584,27594,27599,27646,27708,27738,27945,28004,28016,28121,28128,28135,28136,28159,28245,28352,28405,28454,28520,28548,28570,28606,28749,28766,28770,28781,28815,28881,29132,29221,29250,29311,29313,29332,29336,29344,29345,29356,29390,29441,29543,29568,29600,29613,29635,29642,29710,29746,29767,29768,29797,29804,29820,29888,29916,29925,29933,29974,29990,30008,30011,30026,30163,30264,30274,30301,30342,30342,30369,30480,30541,30590,30615,30727,30731,30868,30871,30910,30924,30948,30993,31014,31031,31050,31107,31189,31276,31301,31307,31451,31587,31794,31806,31824,31847,31958,31976,32252,32263,32328,32330,32342,32438,32674,32763].length);
// console.log(
//   'Median of two arrays using sort: ',
//   checkLogic([16,47,230,439,717,730,921,939,1075,1174,1240,1587,1716,1738,1757,1835,1896,1899,1917,1957,1962,1994,2044,2203,2276,2351,2388,2404,2460,2473,2580,2650,2672,2738,2800,2809,3038,3100,3102,3139,3142,3182,3292,3417,3516,3573,3638,3770,3876,4049,4103,4121,4125,4135,4140,4300,4335,4558,4582,4915,5033,5072,5154,5168,5271,5485,5609,5631,5728,5755,5800,5873,5903,6012,6088,6287,6316,6468,6493,6504,6513,6925,6944,6954,6997,7004,7048,7077,7313,7346,7381,7401,7438,7593,7639,7753,7763,7794,7841,7869,7874,7881,7938,8134,8181,8235,8364,8478,8540,8566,8657,8663,8833,8973,8990,9084,9189,9221,9224,9591,9672,9722,9768,9832,9974,10067,10070,10072,10187,10274,10372,10668,10852,11076,11144,11192,11220,11431,11469,11596,11644,11649,11701,11724,11815,11856,12054,12117,12131,12208,12316,12326,12357,12474,12572,12608,12668,12721,12943,12980,13181,13265,13534,13562,13620,13646,13778,13783,13866,13950,13984,14243,14343,14359,14427,14662,14727,14790,14790,15014,15070,15276,15377,15392,15448,15453,15576,15622,15629,15676,15920,15928,16041,16499,16576,16676,16854,17025,17136,17289,17532,17564,17593,17621,17745,17834,18193,18237,18314,18368,18488,18594,18737,18822,18823,18920,18947,19275,19340,19391,19450,19605,19922,20272,20356,20459,20537,20682,20792,20864,20913,21001,21063,21167,21212,21225,21230,21333,21520,21713,21723,22159,22183,22471,22575,22637,22845,23040,23074,23079,23161,23195,23344,23351,23391,23408,23522,23529,23534,23542,23588,23945,23980,24107,24132,24184,24239,24384,24422,24472,24506,24556,24570,24626,24834,24914,25032,25056,25076,25098,25106,25180,25255,25277,25511,25521,25524,25626,25778,26150,26203,26291,26518,26577,26678,26922,26945,26957,27064,27142,27203,27222,27368,27588,27625,27634,27682,28052,28132,28210,28420,28494,28496,28513,28620,28686,28705,28726,28871,28876,28897,29449,29460,29463,29533,29579,29657,29771,29801,29814,29877,29916,29924,29993,30074,30085,30110,30199,30222,30245,30444,30513,30525,30729,30886,30925,31018,31095,31254,31401,31416,31549,31597,31810,31857,32086,32148,32588], [17,46,151,181,197,229,262,286,308,493,562,575,636,657,715,833,900,913,963,1042,1079,1176,1346,1412,1423,1497,1534,1571,1615,1622,1630,1674,1692,1831,1854,1981,2026,2042,2052,2073,2086,2090,2101,2139,2177,2185,2204,2209,2314,2382,2385,2424,2555,2700,2716,2867,2881,2886,2890,2900,2963,3066,3098,3107,3124,3132,3187,3196,3217,3217,3318,3362,3375,3395,3443,3443,3500,3557,3588,3599,3644,3656,3660,3830,3834,3841,3870,3870,3871,3900,4050,4389,4428,4481,4549,4571,4596,4756,4817,5070,5112,5163,5166,5215,5287,5330,5360,5370,5383,5426,5481,5517,5523,5613,5694,5891,5891,5893,6035,6062,6110,6162,6164,6171,6224,6228,6334,6365,6375,6390,6396,6398,6441,6452,6614,6623,6722,6799,6905,6927,6940,6996,7052,7175,7268,7287,7304,7342,7391,7426,7474,7562,7566,7612,7639,7756,7854,7862,7912,7972,8001,8142,8188,8191,8205,8235,8300,8688,8730,8747,8755,8773,8799,8849,8975,8989,9011,9106,9229,9256,9335,9389,9415,9424,9538,9565,9616,9623,9656,9675,9714,9714,9725,9733,9805,9848,9875,9908,9913,9939,10072,10084,10110,10132,10161,10479,10578,10594,10604,10610,10717,10785,10827,10827,10853,10898,10905,10919,10934,10951,10960,10961,11070,11148,11160,11291,11357,11386,11399,11424,11452,11648,11734,11805,11874,11893,11899,11925,11930,12009,12037,12048,12054,12057,12079,12081,12321,12458,12504,12741,12815,12815,12846,12974,12985,13070,13129,13148,13150,13205,13319,13630,13853,13861,13921,13960,14005,14011,14149,14151,14177,14220,14248,14346,14452,14457,14498,14500,14672,14686,14729,14742,14749,14759,14777,14789,14802,14859,14861,14861,14999,15003,15067,15069,15167,15198,15220,15286,15389,15432,15438,15444,15511,15512,15514,15515,15555,15570,15680,15702,15719,15722,15723,15764,15781,15850,15884,15887,15943,16043,16060,16110,16136,16158,16219,16273,16287,16294,16328,16384,16408,16478,16488,16504,16546,16566,16605,16710,16712,16762,16867,16965,17004,17245,17247,17314,17433,17434,17453,17519,17569,17583,17626,17700,17711,17777,17819,17876,17931,17972,18025,18034,18183,18206,18221,18223,18314,18347,18349,18416,18425,18472,18498,18645,18664,18767,18792,19000,19084,19131,19157,19162,19226,19314,19429,19518,19558,19622,19649,19728,19744,19868,19879,19957,19959,20049,20151,20239,20239,20329,20346,20395,20493,20504,20512,20553,20695,20756,20790,20856,20890,20900,20928,21046,21171,21216,21443,21443,21471,21526,21553,21859,21894,21950,21961,22095,22113,22127,22185,22210,22225,22329,22359,22361,22424,22505,22528,22605,22640,22719,22792,22818,22823,22850,22855,22903,23076,23197,23213,23237,23245,23259,23444,23485,23550,23574,23671,23718,23817,23826,23840,23924,24019,24054,24183,24191,24276,24303,24655,24690,24786,24807,24817,24891,24914,25025,25085,25123,25219,25248,25327,25351,25353,25366,25380,25419,25438,25487,25488,25544,25593,25768,25792,25806,25817,25822,25828,25858,25950,25954,25972,25996,25997,26019,26049,26095,26293,26298,26300,26421,26438,26440,26442,26503,26510,26532,26615,26628,26643,26648,26702,26750,26797,26833,26859,26860,26919,26935,26997,27096,27140,27169,27169,27206,27240,27249,27250,27256,27294,27331,27367,27375,27409,27411,27443,27509,27517,27532,27584,27594,27599,27646,27708,27738,27945,28004,28016,28121,28128,28135,28136,28159,28245,28352,28405,28454,28520,28548,28570,28606,28749,28766,28770,28781,28815,28881,29132,29221,29250,29311,29313,29332,29336,29344,29345,29356,29390,29441,29543,29568,29600,29613,29635,29642,29710,29746,29767,29768,29797,29804,29820,29888,29916,29925,29933,29974,29990,30008,30011,30026,30163,30264,30274,30301,30342,30342,30369,30480,30541,30590,30615,30727,30731,30868,30871,30910,30924,30948,30993,31014,31031,31050,31107,31189,31276,31301,31307,31451,31587,31794,31806,31824,31847,31958,31976,32252,32263,32328,32330,32342,32438,32674,32763])
// );
// let testCase10 = [[64,108,115,139,150,154,168,198,206,247,250,287,327,375,402,412,437,440,550,585,598,656,737,740,772,785,787,816,835,845,884,888,917,968,974,1140,1142,1164,1170,1173,1228,1284,1297,1304,1310,1339,1368,1468,1499,1500,1539,1579,1626,1637,1663,1677,1734,1749,1783,1807,1867,1892,1902,1919,1959,1976,2007,2019,2053,2073,2100,2120,2130,2183,2353,2445,2484,2492,2577,2595,2622,2636,2660,2661,2718,2767,2781,2806,2816,2825,2849,2861,2979,2998,3032,3084,3132,3185,3230,3236,3308,3322,3323,3325,3325,3328,3399,3417,3428,3469,3471,3554,3656,3719,3790,3790,3803,3811,3852,3864,3905,3934,4043,4069,4076,4102,4189,4191,4198,4280,4345,4376,4388,4397,4527,4532,4571,4579,4596,4611,4659,4704,4771,4805,4831,4845,4860,4862,4878,4908,4946,4976,5044,5047,5047,5085,5189,5220,5333,5342,5347,5503,5560,5578,5585,5602,5675,5708,5736,5764,5769,5786,5837,5877,5878,5896,5947,5992,6029,6044,6082,6124,6161,6191,6225,6237,6289,6294,6314,6330,6332,6345,6397,6400,6402,6411,6413,6438,6471,6497,6506,6536,6538,6544,6570,6649,6733,6780,6800,6822,6859,6871,6923,6934,6949,6958,6969,6995,7001,7041,7045,7050,7060,7066,7088,7117,7158,7186,7194,7267,7307,7334,7335,7337,7352,7367,7385,7413,7481,7491,7515,7601,7633,7659,7678,7691,7743,7743,7779,7832,7847,7851,7867,7878,7890,7903,7911,7916,7943,7967,8064,8066,8079,8087,8098,8132,8153,8199,8212,8303,8326,8331,8334,8337,8379,8400,8409,8413,8416,8430,8435,8489,8498,8545,8584,8588,8601,8634,8641,8650,8749,8750,8797,8865,8879,8902,8985,8992,9166,9192,9207,9211,9217,9220,9323,9359,9440,9447,9473,9506,9516,9525,9529,9580,9620,9642,9708,9743,9774,10002,10096,10112,10121,10174,10175,10270,10296,10299,10304,10330,10408,10468,10478,10517,10564,10634,10637,10650,10662,10673,10695,10731,10768,10769,10778,10787,10813,10822,10824,11045,11063,11088,11099,11251,11315,11408,11491,11521,11541,11551,11573,11606,11658,11659,11670,11672,11683,11685,11729,11737,11762,11764,11823,11839,11858,11903,11904,11913,12011,12059,12137,12138,12150,12168,12213,12248,12275,12294,12296,12328,12359,12386,12482,12554,12655,12681,12743,12755,12773,12784,12829,12862,12867,12956,13040,13042,13077,13086,13132,13142,13168,13199,13203,13269,13319,13338,13360,13373,13491,13563,13568,13646,13697,13722,13771,13818,13832,13893,13970,13971,13978,13989,14006,14011,14109,14136,14189,14255,14262,14303,14340,14433,14482,14512,14532,14562,14598,14604,14625,14631,14658,14727,14747,14766,14786,14792,14841,14865,14871,14891,14928,14936,15020,15064,15069,15141,15143,15148,15196,15204,15262,15271,15376,15392,15436,15439,15522,15542,15547,15633,15767,15795,15838,15843,15865,15884,15888,15891,15896,15938,15957,16009,16028,16045,16148,16180,16206,16212,16246,16257,16513,16538,16581,16642,16662,16664,16689,16695,16717,16758,16904,16905,17029,17115,17134,17242,17322,17324,17344,17474,17504,17546,17640,17645,17651,17664,17685,17707,17783,17822,17837,17884,17938,17987,18017,18136,18160,18164,18184,18189,18201,18247,18262,18271,18335,18351,18394,18402,18408,18420,18430,18470,18508,18575,18605,18620,18656,18666,18672,18708,18727,18736,18747,18774,18789,18814,18871,18907,18923,19105,19111,19126,19169,19171,19263,19298,19321,19369,19404,19431,19435,19476,19478,19516,19527,19632,19660,19763,19763,19830,19832,19989,20021,20033,20039,20040,20058,20071,20084,20114,20114,20139,20159,20208,20238,20243,20248,20397,20412,20422,20433,20448,20474,20581,20608,20614,20633,20637,20707,20725,20735,20745,20769,20795,20809,20812,20842,20861,20922,20951,20955,21091,21107,21113,21145,21190,21210,21270,21298,21329,21341,21418,21462,21505,21523,21545,21547,21596,21600,21662,21676,21710,21733,21748,21845,21853,21858,21888,21940,21945,21946,21968,22008,22010,22018,22044,22052,22146,22163,22164,22175,22197,22218,22300,22405,22464,22516,22644,22688,22730,22760,22763,22868,22874,22891,22898,22901,22991,23000,23004,23019,23075,23105,23118,23142,23193,23207,23293,23300,23310,23316,23471,23472,23499,23548,23550,23553,23563,23651,23749,23749,23781,23794,23828,23835,23852,23876,23912,23945,23951,23965,24038,24072,24083,24097,24141,24176,24199,24200,24227,24292,24322,24343,24351,24406,24410,24431,24452,24502,24537,24561,24616,24709,24710,24730,24750,24770,24781,24836,24845,24847,24852,24862,24870,24917,24943,24990,25019,25044,25058,25080,25110,25113,25146,25189,25200,25372,25399,25402,25449,25500,25571,25633,25667,25754,25759,25858,25867,25882,25931,25997,26036,26038,26148,26189,26195,26245,26261,26304,26314,26342,26355,26415,26434,26438,26454,26464,26466,26508,26607,26613,26634,26649,26680,26686,26689,26692,26757,26796,26798,26807,26810,26819,26820,26883,26895,26896,26923,26927,26927,26960,27055,27074,27101,27193,27240,27250,27274,27330,27381,27403,27466,27554,27566,27577,27579,27590,27625,27627,27657,27678,27681,27709,27710,27746,27866,27890,27914,27926,27931,27933,27958,27962,27969,27969,28094,28141,28209,28235,28279,28313,28315,28317,28319,28356,28359,28359,28380,28383,28399,28406,28440,28484,28499,28510,28513,28547,28560,28569,28621,28625,28647,28711,28730,28737,28741,28744,28795,28836,28844,28878,28883,28888,28889,28914,28925,28956,28957,28960,29053,29250,29313,29315,29358,29376,29386,29429,29463,29517,29537,29549,29562,29606,29639,29711,29745,29781,29788,29788,29869,29870,29951,30030,30120,30177,30293,30315,30319,30336,30385,30402,30408,30460,30464,30466,30511,30522,30596,30619,30723,30732,30764,30764,30778,30787,30794,30809,30821,30824,30840,30872,30873,30905,30949,31032,31035,31047,31106,31228,31358,31372,31374,31385,31418,31420,31433,31484,31526,31568,31570,31597,31667,31700,31716,31764,31819,31859,31899,31930,31975,32014,32017,32021,32049,32109,32131,32136,32136,32228,32242,32309,32320,32385,32418,32426,32585,32630,32720,32748,32754],
// [113,123,199,238,257,306,312,425,426,430,573,579,607,645,652,670,686,709,721,745,798,800,812,869,883,957,1032,1043,1062,1246,1348,1409,1527,1528,1528,1536,1550,1585,1620,1738,1751,1761,1793,1930,1993,1995,2017,2047,2048,2092,2100,2122,2129,2153,2156,2282,2296,2307,2342,2344,2344,2351,2379,2396,2403,2413,2441,2446,2472,2478,2492,2614,2631,2644,2648,2688,2704,2716,2733,2748,2776,2780,2791,2878,2981,3007,3069,3187,3210,3396,3402,3433,3630,3743,3751,3862,3878,3886,3886,3898,4013,4021,4026,4055,4073,4179,4182,4192,4192,4200,4207,4250,4254,4272,4337,4354,4382,4399,4406,4408,4476,4482,4545,4586,4609,4662,4731,4774,4787,4964,4975,4988,5000,5032,5078,5123,5124,5165,5181,5194,5205,5219,5262,5318,5320,5338,5348,5355,5363,5447,5661,5706,5708,5756,5779,5831,5906,5917,6005,6057,6071,6082,6089,6144,6227,6244,6269,6302,6452,6493,6513,6549,6551,6556,6640,6666,6756,6773,6883,6902,6971,7062,7081,7157,7170,7206,7213,7218,7244,7302,7312,7335,7386,7387,7448,7492,7530,7563,7584,7595,7625,7647,7648,7685,7728,7742,7777,7859,7916,7926,7968,7999,8015,8049,8066,8117,8158,8169,8177,8186,8187,8218,8245,8281,8305,8344,8438,8450,8464,8504,8522,8558,8564,8602,8615,8662,8724,8799,8825,8832,8863,8872,8873,8923,8930,8936,8961,8965,8995,9048,9072,9114,9125,9132,9175,9184,9246,9247,9255,9262,9265,9271,9295,9299,9359,9374,9384,9462,9471,9493,9495,9523,9546,9564,9665,9676,9693,9713,9730,9753,9793,9811,9815,9847,9864,9874,9875,9888,9895,10025,10050,10088,10127,10183,10233,10245,10366,10367,10372,10377,10383,10413,10415,10480,10480,10496,10523,10537,10628,10632,10680,10691,10691,10702,10765,10833,10842,10844,10870,10898,10955,10962,10976,10977,11028,11098,11164,11222,11249,11256,11259,11314,11380,11432,11459,11501,11550,11565,11582,11583,11596,11603,11618,11683,11722,11772,11818,11821,11822,11866,11872,11909,11967,11972,12057,12110,12230,12283,12295,12327,12338,12358,12517,12533,12558,12584,12587,12628,12695,12710,12712,12730,12755,12857,12862,12882,12904,12907,13027,13066,13078,13133,13208,13210,13230,13261,13298,13339,13340,13364,13384,13414,13462,13464,13467,13476,13492,13546,13559,13594,13600,13605,13646,13675,13675,13689,13726,13738,13788,13792,13800,13806,13840,13850,13866,13914,13952,13998,14085,14148,14167,14182,14193,14197,14206,14243,14260,14392,14425,14494,14504,14542,14603,14628,14643,14645,14685,14691,14701,14717,14719,14830,14839,14848,14853,14889,14942,14985,14987,15041,15060,15114,15145,15184,15220,15274,15303,15341,15353,15364,15386,15390,15398,15418,15490,15509,15669,15823,15844,15938,15950,15975,16132,16138,16151,16158,16224,16251,16407,16430,16494,16530,16532,16534,16570,16613,16637,16638,16640,16681,16722,16742,16756,16756,16827,16839,16844,16864,16931,16954,16971,16989,16995,17002,17009,17037,17093,17118,17138,17177,17177,17194,17223,17285,17320,17322,17326,17342,17352,17373,17402,17411,17411,17417,17418,17444,17452,17474,17488,17502,17586,17593,17595,17636,17643,17676,17689,17692,17702,17713,17738,17764,17772,17796,17796,17799,17815,17823,17865,17933,17952,17962,17985,18022,18040,18059,18104,18140,18204,18217,18402,18405,18463,18503,18520,18534,18602,18694,18759,18773,18804,18848,18897,18935,18950,18993,19008,19100,19105,19167,19199,19242,19250,19254,19292,19297,19308,19343,19418,19518,19580,19601,19628,19651,19655,19747,19788,19805,19876,19877,19883,19938,19939,19951,19954,19962,19968,20003,20019,20119,20179,20212,20227,20265,20269,20333,20342,20346,20480,20508,20531,20538,20544,20625,20644,20670,20693,20740,20747,20752,20812,20835,20837,20843,20862,20940,21010,21073,21127,21130,21153,21187,21210,21328,21369,21387,21465,21466,21466,21476,21517,21547,21558,21561,21672,21688,21753,21803,21866,21937,21962,21965,21989,22002,22024,22128,22255,22256,22311,22338,22391,22393,22408,22410,22416,22429,22483,22517,22519,22543,22555,22571,22572,22647,22652,22723,22784,22907,22916,23042,23043,23167,23242,23257,23299,23307,23309,23322,23342,23398,23408,23437,23463,23494,23526,23554,23640,23658,23703,23723,23746,23787,23791,23851,23902,23904,23909,23918,23930,23946,23964,23967,24044,24050,24063,24070,24086,24134,24144,24236,24252,24292,24303,24303,24368,24402,24416,24476,24481,24496,24522,24555,24569,24626,24653,24656,24711,24761,24767,24813,24851,24852,24867,24875,24883,24889,24898,24917,24919,24925,24931,24954,24974,25002,25185,25198,25234,25237,25296,25347,25349,25356,25359,25405,25433,25457,25528,25558,25576,25600,25616,25661,25667,25711,25713,25751,25764,25796,25813,25817,25820,25824,25866,25866,25899,25926,25940,25973,26026,26138,26230,26308,26332,26339,26370,26387,26472,26554,26638,26646,26655,26761,26791,26860,26886,26918,26919,26971,26975,26993,27000,27021,27056,27081,27090,27110,27115,27134,27156,27174,27220,27226,27241,27265,27268,27287,27311,27359,27426,27432,27491,27511,27604,27607,27615,27716,27723,27754,27792,27822,27828,27838,27858,27865,27872,27891,27928,27947,27962,27964,28013,28029,28031,28047,28085,28099,28122,28136,28142,28148,28148,28181,28184,28197,28200,28215,28304,28315,28319,28449,28486,28527,28657,28665,28731,28753,28755,28766,28775,28849,28862,28898,28901,28957,28962,29016,29077,29141,29155,29170,29185,29197,29225,29241,29244,29275,29291,29300,29318,29356,29382,29383,29383,29398,29420,29506,29547,29550,29755,29854,30059,30141,30142,30173,30177,30179,30194,30210,30215,30221,30305,30326,30359,30390,30407,30543,30595,30606,30634,30644,30644,30683,30685,30726,30807,30846,30858,30865,30918,30984,30991,31051,31072,31127,31139,31223,31336,31375,31400,31435,31468,31512,31625,31629,31741,31823,31844,31901,31998,32008,32013,32016,32079,32139,32161,32173,32205,32295,32304,32357,32367,32377,32384,32389,32390,32391,32450,32452,32454,32462,32505,32561,32570,32633,32650,32660,32683,32691,32694,32732]];
// console.log(
//   findMedianSortedArrays(testCase10[0], testCase10[1])
// );
// console.log('Length of arrays: ', testCase10[0].length, testCase10[1].length);
// console.log(
//   'Median of two arrays using sort: ',
//   checkLogic(testCase10[0], testCase10[1])
// );
// const testCase1 = [[1, 3], [2]];
// const testCase2 = [[3, 4], [1, 2]];
// const testCase3 = [[1, 3, 5, 7, 9], [2, 4, 6, 8]];
// const testCase4 = [[1, 3, 5, 7, 9, 11, 13, 15, 17], [2, 4, 6, 8, 10, 12, 14, 16]];
// const testCase5 = [[100, 500, 1000], [2, 4]];

// console.log(findMedian(testCase1[0], testCase1[1]));
// console.log(findMedian(testCase2[0], testCase2[1]));
// console.log(findMedian(testCase3[0], testCase3[1]));
// console.log(findMedianObject(testCase5[0].concat(testCase3[0])));
// console.log(findMedianObject(testCase3[1].concat(testCase5[0])));
// console.log('Median of two arrays: ', findMedianTwoSorted(testCase5[0], testCase3[0]).medianVal);
// console.log('Median of two arrays using sort: ', checkLogic(testCase5[0], testCase3[0]));
// console.log('Median of two arrays: ', findMedianTwoSorted(testCase3[1], testCase5[0]).medianVal);
// console.log('Median of two arrays using sort: ', checkLogic(testCase3[1], testCase5[0]));
// console.log('Median of two arrays: ', findMedianTwoSorted(testCase4[0], testCase4[1]).medianVal);
// console.log('Median of two arrays using sort: ', checkLogic(testCase4[0], testCase4[1]));
// console.log('Median of two arrays: ', findMedianTwoSorted(testCase1[0], testCase1[1]).medianVal);
// console.log('Median of two arrays using sort: ', checkLogic(testCase1[0], testCase1[1]));
// console.log('Median of two arrays: ', findMedianTwoSorted(testCase2[0], testCase2[1]).medianVal);
// console.log('Median of two arrays using sort: ', checkLogic(testCase2[0], testCase2[1]));
// console.log('Median of two arrays: ', findMedianTwoSorted(testCase3[0], testCase3[1]).medianVal);
// console.log('Median of two arrays using sort: ', checkLogic(testCase3[0], testCase3[1]));
// console.log('Median of two arrays: ', findMedianTwoSorted(testCase5[0], testCase5[1]).medianVal);
// console.log('Median of two arrays using sort: ', checkLogic(testCase5[0], testCase5[1]));
//
//
//
// const findMedianTwoSorted = (sortedArray1, sortedArray2) => {
//   const arr1 = {};
//   arr1.length = sortedArray1.length;
//   arr1.high = [arr1.length - 1, sortedArray1[arr1.length - 1]];
//   arr1.low = [0, sortedArray1[0]];
//   arr1.midpoint = arr1.length % 2 === 0 ? arr1.length / 2 - 1 : Math.floor(arr1.length / 2);
//   arr1.median =
//     arr1.length % 2 === 0
//       ? (sortedArray1[arr1.midpoint] + sortedArray1[arr1.midpoint + 1]) / 2
//       : sortedArray1[arr1.midpoint];
//   const arr2 = {};
//   arr2.length = sortedArray2.length;
//   arr2.high = [arr2.length - 1, sortedArray2[arr2.length - 1]];
//   arr2.low = [0, sortedArray1[0]];
//   arr2.midpoint = arr2.length % 2 === 0 ? arr2.length / 2 - 1 : Math.floor(arr2.length / 2);
//   arr2.median =
//     arr2.length % 2 === 0
//       ? (sortedArray2[arr2.midpoint] + sortedArray2[arr2.midpoint + 1]) / 2
//       : sortedArray2[arr2.midpoint];
//   console.log(sortedArray1, sortedArray2);
//   if (arr1.length > 2 && arr2.length > 2) {
//     console.log(arr1.midpoint, arr1.median);
//     console.log(arr2.midpoint, arr2.median);
//     if (arr1.median > arr2.median) {
//       console.log(
//         findMedianTwoSorted(sortedArray1.slice(0, arr1.midpoint), sortedArray2.slice(arr2.midpoint))
//       );
//     } else if (arr2.median > arr1.median) {
//       console.log(
//         findMedianTwoSorted(sortedArray1.slice(arr1.midpoint), sortedArray2.slice(arr2.midpoint))
//       );
//     } else {
//       console.log(arr1.median, arr2.median);
//       console.log("they're equal");
//     }
//     console.log(
//       findMedianTwoSorted(sortedArray1.slice(arr1.midpoint), sortedArray2.slice(arr2.midpoint))
//     );
//   } else if (arr1.length > 2) {
//     console.log(arr1.midpoint);
//     console.log(arr2.midpoint);
//     // TODO: add logic for checking which median is greater to determine which index
//     console.log(findMedianTwoSorted(sortedArray1.slice(arr1.midpoint), sortedArray1[0]));
//   } else if (arr2.length > 2) {
//     console.log(arr1.midpoint);
//     console.log(arr2.midpoint);
//     // TODO: add logic for checking which median is greater to determine which index
//     console.log(findMedianTwoSorted(sortedArray1[0], sortedArray2.slice(arr2.midpoint)));
//   }
//   return [arr1.median, arr2.median];
// };
